var // gulp requires from node_modules/
browsersync = require("browser-sync"),
del         = require("del"),
merge       = require("merge-stream"),
runsequence = require("run-sequence"),

gulp        = require("gulp"),
autoprefix 	= require("gulp-autoprefixer"),
coffeelint 	= require("gulp-coffeelint"),
coffee     	= require("gulp-coffee"),
csslint 	 	= require("gulp-csslint"),
concat 			= require("gulp-concat"),
debug      	= require('gulp-debug'),
filter     	= require("gulp-filter"),
flatten    	= require("gulp-flatten"),
imagemin   	= require("gulp-imagemin"),
jshint			= require("gulp-jshint"),
less       	= require("gulp-less"),
lesshint		= require("gulp-lesshint"),
plumber    	= require("gulp-plumber"),
rename     	= require("gulp-rename"),
minijs     	= require("gulp-uglify"),
minicss    	= require("gulp-cssnano"),

uibuild     =	require("./inc/semantic/tasks/build"),
uiwatch     = require("./inc/semantic/tasks/watch"),		
		
// project vars
manifest    = require("asset-builder")("./manifest.json"),

paths       = manifest.paths,
config      = manifest.config,
globs       = manifest.globs,
project     = manifest.getProjectGlobs(),

assets      = {
  coffee  : paths.assets + "coffee/",
  css		  : paths.assets + "css/",
  fonts	  : paths.assets + "fonts/",
  images  : paths.assets + "images/",
  js		  : paths.assets + "js/",
  less	  : paths.assets + "less/"
},
dist        = {
  fonts  	: paths.dist + "fonts/",
  images 	: paths.dist + "images/",
  scripts	: paths.dist + "scripts/",
  styles 	: paths.dist + "styles/"
},
semantic    = config.semantic,
bower       = config.bower,
nodes       = config.node,

main 				= {
  css			: manifest.getDependencyByName('main.css'),
  js 			: manifest.getDependencyByName('main.js')
},
scripts 		= manifest.getDependencyByName('scripts.js'),
styles  		= manifest.getDependencyByName('styles.css'),

all         = {
  dist  	: paths.dist 		+ "**/*",
  fonts 	: assets.fonts  + "**/*",
  images	: assets.images + "**/*"
},

any 				= {
  coffee	: "**/*.coffee",
  css			: "**/*.css",
  fonts		: [
    "./**/*.eot",
    "./**/*.svg",
    "./**/*.ttf",
    "./**/*.woff",
    "./**/*.woff2",
    "./**/*.otf"
  ],
  js			: "**/*.js",
  less		: "**/*.less"
};

gulp.task("clean", del.bind(null, [
  // empties dist/
  // (only files generated by build task)
  /*all.dist,*/
  "dist/**/*"
]));

gulp.task("buildui", uibuild);
gulp.task("watchui", uiwatch);

gulp.task("fonts", [], function() {
  // optimize & move all font files -> dist/fonts/
  return gulp.src([
    "./**/*.eot",
    "./**/*.svg",
    "./**/*.ttf",
    "./**/*.woff",
    "./**/*.woff2",
    "./**/*.otf"
  ])
    .pipe(plumber())
    .pipe(flatten())
    .pipe(debug())
    .pipe(gulp.dest("dist/fonts/"))
  	.pipe(browsersync.stream());
});
gulp.task("images", [], function() {
// optimize & move images -> dist/images/
  return gulp.src("assets/images/**/*")
    .pipe(plumber())
    .pipe(imagemin({
      optimizationLevel: 3,
      progressive: true,
      interlaced: true
    }))
    .pipe(debug())
    .pipe(gulp.dest("dist/images/"))
  	.pipe(browsersync.stream());
});
gulp.task("coffee", [], function() {
// lint & compile .coffee files -> assets/js/
  return gulp.src("assets/coffee/main.coffee")
    .pipe(plumber())
    .pipe(coffeelint())
    .pipe(coffee())
    .pipe(debug())
    .pipe(rename("main.js"))
    .pipe(gulp.dest("dist/scripts/"))
    .pipe(browsersync.stream());
});
gulp.task("less", [], function() {
  return gulp.src("assets/less/main.less")
    .pipe(plumber())
    .pipe(lesshint())
    .pipe(less())
    .pipe(debug())
		.pipe(autoprefix())
    .pipe(rename("main.css"))
    .pipe(gulp.dest("dist/styles/"))
    .pipe(browsersync.stream());
});
gulp.task("scripts",  ["coffee"], function() {
  return gulp.src("bower_components/jquery/dist/jquery.js")
    .pipe(plumber())
    .pipe(jshint())
    .pipe(debug())
    .pipe(gulp.dest("dist/scripts/"));
});

gulp.task("build", ["clean"], function(callback) {
  runsequence(
    ["fonts","images"],
    ["scripts","less"],
    callback);
});

gulp.task("watch", function() {
  browsersync.init({
    files: ["./**/*.php","./inc/semantic/src/**/*"],
    proxy: config.devUrl,
    snippetOptions: {
      whitelist: ["/wp-admin/admin-ajax.php"],
      blacklist: ["/wp-admin/**"]
    }
  });
  gulp.watch(["assets/less/**/*"],      ["less"]);
	gulp.watch(["assets/coffee/**/*"],    ["coffee"]);
	gulp.watch(["assets/fonts/**/*"],     ["fonts"]);
	gulp.watch(["assets/images/**/*"],    ["images"]);
});

gulp.task("watchall", function() {
	return gulp.start(["watch","watchui"]);
});

gulp.task("default",  ["build"], function() {
  return gulp.start("watchall");
});
